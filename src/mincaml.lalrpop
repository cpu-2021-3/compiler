use std::str::FromStr;
use crate::syntax::{Spanned, RawExpr, Expr, UnaryOp, BinaryOp, TypedVar};
use crate::ty::{VarType};
use crate::id::generate_id;

grammar;

// すべての valid な式
pub Expr: Box<Expr<VarType>> = {
    // 優先順位がより高い式
    SemiSeqExpr,
}

// セミコロンを含む式
SemiSeqExpr: Box<Expr<VarType>> = {
    LetExpr,
    // セミコロン (式;式)
    <l:@L> <exp_var: SemiExpr> ";" <exp_suc: LetExpr> <r:@R> => {
        let var = TypedVar::<VarType> {name: generate_id("sm"), t: VarType::Unit.wrap_var()};
        Box::new(Spanned::new(RawExpr::LetIn{var, exp_var, exp_suc}, (l,r)))
    },
};

// let を含む式
LetExpr: Box<Expr<VarType>> = {
    IfExpr,
    <l:@L> "let" <raw_expr: LetInPart> <r:@R> => {
        Box::new(Spanned::new(raw_expr, (l,r)))
    },

    <l:@L> "if" <cond: Expr> "then" <exp_then: Expr> "else" <l2:@L> "let" <raw_expr: LetInPart> <r2:@R> <r:@R> => {
        let exp_else = Box::new(Spanned::new(raw_expr, (l2,r2)));
        Box::new(Spanned::new(RawExpr::If{cond, exp_then, exp_else}, (l,r)))
    },
}

// 3 種類の let 文のパーツ
LetInPart: RawExpr<VarType> = {
    <var_name: Identifier> "=" <exp_var: Expr> "in" <exp_suc: Expr> => {
        let var = TypedVar::<VarType> {name: var_name, t: VarType::new()};
        RawExpr::LetIn{var, exp_var, exp_suc}
    },

    "rec" <fun_name: Identifier> <args: DeclaredArgs> "=" <exp_fun: Expr> "in" <exp_suc: Expr> => {
        let fun = TypedVar::<VarType> {name: fun_name, t: VarType::new()};
        RawExpr::LetRecIn{fun, args, exp_fun, exp_suc}
    },

    "(" <vars: DeclaredTuple> ")" "=" <exp_var: Expr> "in" <exp_suc: Expr> => {
        RawExpr::LetTupleIn{vars, exp_var, exp_suc}
    },
}

SemiExpr: Box<Expr<VarType>> = {
    IfExpr,
    // セミコロン (式;式)
    <l:@L> <exp_var: SemiExpr> ";" <exp_suc: IfExpr> <r:@R> => {
        let var = TypedVar::<VarType> {name: generate_id("sm"), t: VarType::Unit.wrap_var()};
        Box::new(Spanned::new(RawExpr::LetIn{var, exp_var, exp_suc}, (l,r)))
    },
};

// if 文を含む式
IfExpr: Box<Expr<VarType>> = {
    MiddleExpr,
    // if 式
    <l:@L> "if" <cond: Expr> "then" <exp_then: Expr> "else" <exp_else: IfExpr> <r:@R> 
        => Box::new(Spanned::new(RawExpr::If{cond, exp_then, exp_else}, (l,r))),
};

// if 文より大きい優先度の式
MiddleExpr: Box<Expr<VarType>> = {
    // 優先順位がより高い式、単項演算子 (not, -, -.)、関数適用、Array.create
    #[precedence(level="0")] 
    BasicExpr,
    <l:@L> <op: UnaryOp> <exp: MiddleExpr> <r:@R> => {
        if op == UnaryOp::Neg {
            if let RawExpr::Float(f) = exp.item {
                return Box::new(Spanned::new(RawExpr::UnOp{op: UnaryOp::FNeg, exp}, (l,r)));
            }
        }
        Box::new(Spanned::new(RawExpr::UnOp{op, exp}, (l,r)))
    },
    <l:@L> <fun: BasicExpr> <args: AppliedArgs> <r:@R> => Box::new(Spanned::new(RawExpr::Apply{fun, args}, (l,r))),
    <l:@L> NewArrayRegex <size: BasicExpr> <value: BasicExpr> <r:@R> => Box::new(Spanned::new(RawExpr::NewArray{size, value}, (l,r))),

    // 積 (*, /, *., /.)
    #[precedence(level="1")]
    #[assoc(side="left")]
    <l:@L> <exp_left: MiddleExpr> <op: FactorOp> <exp_right: MiddleExpr> <r:@R> => Box::new(Spanned::new(RawExpr::BiOp{exp_left, op, exp_right}, (l,r))),

    // 和 (+, -, +., -.)
    #[precedence(level="2")]
    #[assoc(side="left")]
    <l:@L> <exp_left: MiddleExpr> <op: TermOp> <exp_right: MiddleExpr> <r:@R> => Box::new(Spanned::new(RawExpr::BiOp{exp_left, op, exp_right}, (l,r))),

    // 比較演算子 (<, >, <=, >=, =, <>)
    #[precedence(level="3")]
    #[assoc(side="left")]
    <l:@L> <exp_left: MiddleExpr> <op: CompareOp> <exp_right: MiddleExpr> <r:@R> => 
        Box::new(Spanned::new(RawExpr::BiOp{exp_left, op, exp_right}, (l,r))),
    <l:@L> <exp_right: MiddleExpr> <op: RevCompareOp> <exp_left: MiddleExpr> <r:@R> => 
        Box::new(Spanned::new(RawExpr::BiOp{exp_left, op, exp_right}, (l,r))),
    <l:@L> <exp_left: MiddleExpr> <op: NotCompareOp> <exp_right: MiddleExpr> <r:@R> => 
        Box::new(Spanned::new(RawExpr::UnOp{op: UnaryOp::Not, exp: Box::new(Spanned::new(RawExpr::BiOp{exp_left, op, exp_right}, (l,r)))}, (l,r))),
    <l:@L> <exp_right: MiddleExpr> <op: NotRevCompareOp> <exp_left: MiddleExpr> <r:@R> => 
        Box::new(Spanned::new(RawExpr::UnOp{op: UnaryOp::Not, exp: Box::new(Spanned::new(RawExpr::BiOp{exp_left, op, exp_right}, (l,r)))}, (l,r))),

    // タプル (括弧で囲われたカンマ区切りの式)
    //#[precedence(level="4")]
    //<l:@L> "(" <elements: TupleElements> ")" <r:@R> => Box::new(Spanned::new(RawExpr::NewTuple(elements), (l,r))),

    // 配列への代入
    #[precedence(level="5")]
    <l:@L> <array: BasicExpr> "." "(" <index: MiddleExpr> ")" "<-" <value: IfExpr> <r:@R> => Box::new(Spanned::new(RawExpr::ArrayPut{array, index, value}, (l,r))),

};

// 単項演算子
UnaryOp: UnaryOp = {
    "not" => UnaryOp::Not,
    "-" => UnaryOp::Neg,
    "-." => UnaryOp::FNeg,
};

// 二項演算子（足し算、引き算）
TermOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
    "+." => BinaryOp::FAdd,
    "-." => BinaryOp::FSub,
};

// 二項演算子（掛け算、割り算）
FactorOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "*." => BinaryOp::FMul,
    "/." => BinaryOp::FDiv,
};

// 比較演算子
CompareOp: BinaryOp = {
    "=" => BinaryOp::Eq,
    "<=" => BinaryOp::LEq,
};
RevCompareOp: BinaryOp = {
    ">=" => BinaryOp::LEq,
};
NotCompareOp: BinaryOp = {
    "<>" => BinaryOp::Eq,
    ">" => BinaryOp::LEq,
};
NotRevCompareOp: BinaryOp = {
    "<" => BinaryOp::LEq,
};

// 括弧が無くても関数の引数になれる式
BasicExpr: Box<Expr<VarType>> = {
    // 括弧で囲われた式、Unit
    #[precedence(level="0")]
    "(" <Expr> ")",
    <l:@L> "(" ")" <r:@R> => Box::new(Spanned::new(RawExpr::Unit, (l,r))),

    // タプル (括弧で囲われたカンマ区切りの式)
    <l:@L> "(" <elements: TupleElements> ")" <r:@R> => Box::new(Spanned::new(RawExpr::NewTuple(elements), (l,r))),

    // 整数リテラル
    #[precedence(level="1")]
    <l:@L> <integer: Integer> <r:@R> => Box::new(Spanned::new(RawExpr::Int(integer), (l,r))),

    // 浮動小数リテラル
    <l:@L> <float: Float> <r:@R> => Box::new(Spanned::new(RawExpr::Float(float), (l,r))),

    // 変数名
    <l:@L> <id: Identifier> <r:@R> => Box::new(Spanned::new(RawExpr::Var(id), (l,r))),

    // ブール値 (true または false)
    <l:@L> <boolean: Boolean> <r:@R> => Box::new(Spanned::new(RawExpr::Bool(boolean), (l,r))),

    // 配列の値
    #[precedence(level="2")]
    <l:@L> <array: BasicExpr> "." "(" <index: MiddleExpr> ")" <r:@R> => Box::new(Spanned::new(RawExpr::ArrayGet{array, index}, (l,r))),    
    
};

// 関数の引数（適用時）
AppliedArgs: Vec<Expr<VarType>> = {
    <mut v: AppliedArgs> <e:BasicExpr> => {
        v.push(*e);
        v
    },
    BasicExpr => vec![*<>]
};

// 関数の引数（宣言時）
DeclaredArgs: Vec<TypedVar<VarType>> = {
    <mut v: DeclaredArgs> <id: Identifier> => {
        v.push(TypedVar::<VarType>{name: id, t: VarType::new()});
        v
    },
    Identifier => vec![TypedVar::<VarType>{name: <>, t: VarType::new()}] 
};

// タプルの要素をカンマ区切りにしたもの (長さ 2 以上)
TupleElements: Vec<Expr<VarType>> = {
    <mut v: TupleElements> "," <e: Expr> => {
        v.push(*e);
        v
    },
    <e1: Expr> "," <e2: Expr> => vec![*e1, *e2]
};

// let 文中のタプルの要素
DeclaredTuple: Vec<TypedVar<VarType>> = {
    <v: DeclaredTuple> "," <id: Identifier> => {
        let mut v = v;
        v.push(TypedVar::<VarType>{name: id, t: VarType::new()});
        v
    },
    <id1: Identifier> "," <id2: Identifier> => {
        let t1 = TypedVar::<VarType>{name: id1, t: VarType::new()};
        let t2 = TypedVar::<VarType>{name: id2, t: VarType::new()};
        vec![t1, t2]
    }
};


Integer: i32 = {
    IntegerRegex => i32::from_str(<>).unwrap()
};

Float: f32 = {
    FloatRegex => f32::from_str(<>).unwrap(),
};

Boolean: bool = {
    BooleanRegex => bool::from_str(<>).unwrap()
};

Identifier: String = {
    "_" => generate_id("us."),
    IdentifierRegex => <>.to_string(),
};

match {
    //r"\(\*([^\*]|\*[^\)]|\n)*\*+\)" => {}
    r"\(\*[^*]*\*+(?:[^\)*][^*]*\*+)*\)" => {}
}
else{
    r"[0-9]+" => IntegerRegex
}
else {
    r"[0-9]+(\.[0-9]*)?([eE][\+-]?[0-9]+)?" => FloatRegex,
}
else {
    r"true|false" => BooleanRegex,
    "not","if","then","else","let","in","rec","(",
    r"Array\.(create|make)" => NewArrayRegex,
}
else {
    r"[a-z]([0-9a-zA-Z_])*" => IdentifierRegex,
}
else
{
    r"\s*" => {},
    _
}